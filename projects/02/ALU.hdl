// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Not (in= x[0], out =A);
    And (a= A, b=x[0], out= zero);
    Not (in=zero, out=one);
    
    Mux16(a=x, b[0]=zero, b[1]=zero, b[2]=zero, b[3]=zero,
	b[4]=zero, b[5]=zero, b[6]=zero, b[7]=zero, b[8]=zero,
	b[9]=zero, b[10]=zero, b[11]=zero, b[12]=zero, b[13]=zero,
	b[14]=zero, b[15]=zero, sel=zx, out=NewX);
    Not16(in=NewX, out=NotX);
    Mux16(a=NewX, b=NotX, sel=nx, out=FinalX);
    
    Mux16(a=y, b[0]=zero, b[1]=zero, b[2]=zero, b[3]=zero,
	b[4]=zero, b[5]=zero, b[6]=zero, b[7]=zero, b[8]=zero,
	b[9]=zero, b[10]=zero, b[11]=zero, b[12]=zero, b[13]=zero,
	b[14]=zero, b[15]=zero, sel=zy, out=NewY);
    Not16(in=NewY, out=NotY);
    Mux16(a=NewY, b=NotY, sel=ny, out=FinalY);

    And16(a=FinalX, b=FinalY, out=XandY);
    Add16(a=FinalX, b=FinalY, out=XplusY);
    Mux16(a=XandY, b=XplusY, sel=f, out=fOut);
    Not16(in=fOut, out=notfOut);
    Mux16(a=fOut, b=notfOut, sel=no, out=out, out[0..7]=v1, out[8..15]=v2, out[15]=negative);
    
    Or8Way(in=v1, out=out1);
    Or8Way(in=v2, out=out2);
    Or (a=out1, b= out2, out=zrin);
    Not(in=zrin, out=zr);

    Mux(a=zero, b=one, sel=negative, out=ng);

}

