// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
	

    /** Initializes the keyboard. */
    function void init() {
		return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newLine()
     * backspace = 129 = String.backSpace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
		return Memory.peek(24576);	//to find if a key is being pressed I look in the RAM in at the top of the KeyBoard
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
		var int x;
		while(Keyboard.keyPressed() = 0) {	//I wait for a key to be pressed
		}
		let x = Keyboard.keyPressed(); //I initialize the pressed key
		while(~(Keyboard.keyPressed() = 0)) {	//I wait for the key to be released
		}
		do Output.printChar(x);
		return x;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
		var String str;
		var int x;
		
		do Output.printString(message);
		let str = String.new(64);	//the string will maximally be the length of the screen
		let x = Keyboard.readChar(); // initialize x before entering the loop
		
		while (~(x = 128)) {	//128 represents ENTER
			if(x = 129) {	//129 represents BACKSPACE
				do str.eraseLastChar();
			} else {
				do str.appendChar(x);	//add x to my string
			}
			let x = Keyboard.readChar(); //re-initialize my x (the current char) 
		}
		return str;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
		var String output;
		let output = Keyboard.readLine(message);
		return output.intValue();
    }
}
