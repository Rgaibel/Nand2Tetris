// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	//fixed array that holes 16 values 2^i, i=0,..,15
	static Array twoToThe;

    /** Initializes the library. */
    function void init() {
		var int i;
		let twoToThe = Array.new(16);
		let i = 1;
		let twoToThe[0] = 1;
		while(i < 16) {
			let twoToThe[i] = 2*twoToThe[i - 1] ;
			let i = i + 1;
		}
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if(x < 0) {
			return -x;
		}
		return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
	 
	 /** Returns true if the i-th bit of x is 1, false otherwise*/
	function boolean bit(int x, int i) {
		return ((x & twoToThe[i]) = 1);
		}
		
    function int multiply(int x, int y) { //slide 10
		var int i, sum, shiftedX;
		let sum = 0;
		let shiftedX = x;
		let i = 0;
		while(i < 16) {
			if(Math.bit(y, i)) {	
				let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;	
			let i = i + 1;
		}
		return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {//slide 17
		var int q, output;	//quotient, result
		var bool neg;
		let neg = 0;
		if(((x < 0) & (y > 0)) | ((~(x < 0)) & (y < 0))) {	//if x xor y is negative
			let neg = 1;
		}
		let x = Math.abs(x);
		let y = Math.abs(y);
		if(y > x){	//base case
			return 0;
		}
		let q = Math.divide(x, y + y);	//recursion
		if((x - (2 * y * q)) < y) {	//binary long division
			let output = 2*q;
		} else {
			let output = 2*q + 1;
		}
		if(~(neg)) { //make sure to return the negative
			return output;
		} else {
			return -output;
		}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {       //slide 24
		var int y, j, output, outputSq;
		let y = 0; //if y becomes negative
		let j = 7; 	//(n/2)-1
		while(~(j < 0)) {
			let output = y + twoToThe[j];
			let outputSq = output * output;
			if(~(outputSq > x) & (outputSq > 0)) {	// not an overflow
				let y = output;
			}
			let j = j - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) { 
		if(a > b) {
			return a;
		}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if(a < b) {
			return a;
		}
		return b;
    }
}
